export function App_tsx() {
	return <div dangerouslySetInnerHTML={{__html: `<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) function WithJazz(props: {&#10;    auth: ReactAuthHook;&#10;    syncAddress?: string;&#10;    children: React.ReactNode;&#10;    migration?: AccountMigration;&#10;}): React.JSX.Element&#10;import WithJazz' >WithJazz</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) function useJazz&lt;P extends Profile&lt;ProfileShape, ProfileMeta> = Profile&lt;ProfileShape, ProfileMeta>, R extends CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null> = CoMap&lt;...>, Meta extends AccountMeta = AccountMeta>(): {&#10;    ...;&#10;}&#10;import useJazz' >useJazz</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) function DemoAuth({ appName, appHostname, Component, }: {&#10;    appName: string;&#10;    appHostname?: string;&#10;    Component?: DemoAuthComponent;&#10;}): ReactAuthHook&#10;import DemoAuth' >DemoAuth</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&apos;jazz-react&apos;</span><span style="color: #D4D4D4">;</span></div><div class='line'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='import ReactDOM' >ReactDOM</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&apos;react-dom/client&apos;</span><span style="color: #D4D4D4">;</span></div><div class='line'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) function HashRoute(routes: Routes, { reportToParentFrame }?: {&#10;    reportToParentFrame?: boolean;&#10;}): ReactNode&#10;import HashRoute' >HashRoute</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&apos;hashroute&apos;</span><span style="color: #D4D4D4">;</span></div><div class='line'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) function ChatWindow({ chatId }: {&#10;    chatId: Chat[&apos;id&apos;];&#10;}): React.JSX.Element&#10;import ChatWindow' >ChatWindow</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&apos;./chatWindow.tsx&apos;</span><span style="color: #D4D4D4">;</span></div><div class='line'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) type Chat = CoList&lt;CoID&lt;Message>, JsonObject | null>&#10;import Chat' >Chat</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&apos;./dataModel.ts&apos;</span><span style="color: #D4D4D4">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #9CDCFE"><data-lsp lsp='import ReactDOM' >ReactDOM</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp='function createRoot(container: Element | DocumentFragment, options?: ReactDOM.RootOptions | undefined): ReactDOM.Root' >createRoot</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp='var document: Document' >document</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp='(method) Document.getElementById(elementId: string): HTMLElement | null' >getElementById</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&apos;root&apos;</span><span style="color: #D4D4D4">)!).</span><span style="color: #DCDCAA"><data-lsp lsp='(method) Root.render(children: React.ReactNode): void' >render</data-lsp></span><span style="color: #D4D4D4">(</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp='(alias) function WithJazz(props: {&#10;    auth: ReactAuthHook;&#10;    syncAddress?: string;&#10;    children: React.ReactNode;&#10;    migration?: AccountMigration;&#10;}): React.JSX.Element&#10;import WithJazz' >WithJazz</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) auth: ReactAuthHook' >auth</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #DCDCAA"><data-lsp lsp='(alias) DemoAuth({ appName, appHostname, Component, }: {&#10;    appName: string;&#10;    appHostname?: string | undefined;&#10;    Component?: DemoAuthComponent | undefined;&#10;}): ReactAuthHook&#10;import DemoAuth' >DemoAuth</data-lsp></span><span style="color: #D4D4D4">({ </span><span style="color: #9CDCFE"><data-lsp lsp='(property) appName: string' >appName</data-lsp>:</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&apos;Chat&apos;</span><span style="color: #D4D4D4"> })</span><span style="color: #569CD6">}</span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp='function App(): React.JSX.Element' >App</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #808080">/&gt;</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #4EC9B0"><data-lsp lsp='(alias) function WithJazz(props: {&#10;    auth: ReactAuthHook;&#10;    syncAddress?: string;&#10;    children: React.ReactNode;&#10;    migration?: AccountMigration;&#10;}): React.JSX.Element&#10;import WithJazz' >WithJazz</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">,</span></div><div class='line'><span style="color: #D4D4D4">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #569CD6">function</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp='function App(): React.JSX.Element' >App</data-lsp></span><span style="color: #D4D4D4">() {</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4"> </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">&apos;flex flex-col items-center justify-between w-screen h-screen p-2 dark:bg-black dark:text-white&apos;</span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.DOMAttributes&lt;HTMLButtonElement>.onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #DCDCAA"><data-lsp lsp='(alias) useJazz&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, AccountMeta>(): {&#10;    ...;&#10;}&#10;import useJazz' >useJazz</data-lsp></span><span style="color: #D4D4D4">().</span><span style="color: #9CDCFE"><data-lsp lsp='(property) logOut: () => void' >logOut</data-lsp></span><span style="color: #569CD6">}</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.HTMLAttributes&lt;T>.className?: string | undefined' >className</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">&apos;rounded mb-5 px-2 py-1 bg-stone-200 dark:bg-stone-800 dark:text-white self-end&apos;</span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">      Log Out</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;/</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #569CD6">{</span><span style="color: #DCDCAA"><data-lsp lsp='(alias) HashRoute(routes: Routes, { reportToParentFrame }?: {&#10;    reportToParentFrame?: boolean | undefined;&#10;}): React.ReactNode&#10;import HashRoute' >HashRoute</data-lsp></span><span style="color: #D4D4D4">({</span></div><div class='line'><span style="color: #D4D4D4">      </span><span style="color: #CE9178">&apos;/&apos;</span><span style="color: #9CDCFE">:</span><span style="color: #D4D4D4"> </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp='function Home(): React.JSX.Element' >Home</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #808080">/&gt;</span><span style="color: #D4D4D4">,</span></div><div class='line'><span style="color: #D4D4D4">      </span><span style="color: #CE9178">&apos;/:id&apos;</span><span style="color: #9CDCFE">:</span><span style="color: #D4D4D4"> (</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp='(alias) function ChatWindow({ chatId }: {&#10;    chatId: Chat[&apos;id&apos;];&#10;}): React.JSX.Element&#10;import ChatWindow' >ChatWindow</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) chatId: CoID&lt;Chat>' >chatId</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) id: string' >id</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #C586C0">as</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0"><data-lsp lsp='(alias) type Chat = CoList&lt;CoID&lt;Message>, JsonObject | null>&#10;import Chat' >Chat</data-lsp></span><span style="color: #D4D4D4">[</span><span style="color: #CE9178">&apos;id&apos;</span><span style="color: #D4D4D4">]</span><span style="color: #569CD6">}</span><span style="color: #D4D4D4"> </span><span style="color: #808080">/&gt;</span><span style="color: #D4D4D4">,</span></div><div class='line'><span style="color: #D4D4D4">    }, { </span><span style="color: #9CDCFE"><data-lsp lsp='(property) reportToParentFrame?: boolean | undefined' >reportToParentFrame</data-lsp>:</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">true</span><span style="color: #D4D4D4"> })</span><span style="color: #569CD6">}</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #569CD6">function</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp='function Home(): React.JSX.Element' >Home</data-lsp></span><span style="color: #D4D4D4">() {</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> { </span><span style="color: #4FC1FF"><data-lsp lsp='const me: ResolvedAccount&lt;Account&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, AccountMeta>>' >me</data-lsp></span><span style="color: #D4D4D4"> } = </span><span style="color: #DCDCAA"><data-lsp lsp='(alias) useJazz&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, AccountMeta>(): {&#10;    ...;&#10;}&#10;import useJazz' >useJazz</data-lsp></span><span style="color: #D4D4D4">();</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #6A9955">// Groups determine access rights to values they own.</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp='const createChat: () => void' >createChat</data-lsp></span><span style="color: #D4D4D4"> = () </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> {</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp='const group: Group&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, JsonObject | null>' >group</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #9CDCFE"><data-lsp lsp='const me: ResolvedAccount&lt;Account&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, AccountMeta>>' >me</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp='(method) ResolvedAccount&lt;Account&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{ [key: string]: JsonValue | undefined; }, JsonObject | null>, AccountMeta>>.createGroup(): Group&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, JsonObject | null>' >createGroup</data-lsp></span><span style="color: #D4D4D4">().</span><span style="color: #DCDCAA"><data-lsp lsp='(method) Group&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{ [key: string]: JsonValue | undefined; }, JsonObject | null>, JsonObject | null>.addMember(accountID: AccountID | "everyone", role: Role): Group&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, JsonObject | null>' >addMember</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #CE9178">&apos;everyone&apos;</span><span style="color: #D4D4D4">, </span><span style="color: #CE9178">&apos;writer&apos;</span><span style="color: #D4D4D4">);</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp='const chat: Chat' >chat</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #9CDCFE"><data-lsp lsp='const group: Group&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, JsonObject | null>' >group</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp='(method) Group&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{ [key: string]: JsonValue | undefined; }, JsonObject | null>, JsonObject | null>.createList&lt;Chat>(init?: CoID&lt;Message>[] | undefined, meta?: JsonObject | null | undefined, initPrivacy?: "private" | "trusting"): Chat' >createList</data-lsp></span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp='(alias) type Chat = CoList&lt;CoID&lt;Message>, JsonObject | null>&#10;import Chat' >Chat</data-lsp></span><span style="color: #D4D4D4">&gt;();</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE"><data-lsp lsp='var location: Location' >location</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) Location.hash: string' >hash</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #CE9178">&apos;/&apos;</span><span style="color: #D4D4D4"> + </span><span style="color: #9CDCFE"><data-lsp lsp='const chat: Chat' >chat</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) CoListView&lt;CoID&lt;Message>, JsonObject | null>.id: CoID&lt;Chat>' >id</data-lsp></span><span style="color: #D4D4D4">;</span></div><div class='line'><span style="color: #D4D4D4">  };</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4"> </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.DOMAttributes&lt;HTMLButtonElement>.onClick?: React.MouseEventHandler&lt;HTMLButtonElement> | undefined' >onClick</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp='const createChat: () => void' >createChat</data-lsp></span><span style="color: #569CD6">}</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.HTMLAttributes&lt;T>.className?: string | undefined' >className</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">&apos;rounded py-2 px-4 bg-stone-200 dark:bg-stone-800 dark:text-white my-auto&apos;</span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">    Create New Chat</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.button: React.DetailedHTMLProps&lt;React.ButtonHTMLAttributes&lt;HTMLButtonElement>, HTMLButtonElement>' >button</data-lsp></span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">}</span></div><div class='line'>&nbsp;</div></code></div></pre>`
	}}/>;
}

export function ChatWindow_tsx() {
	return <div dangerouslySetInnerHTML={{__html: `<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) function useAutoSub&lt;T extends CoValue>(id?: CoID&lt;T>): Resolved&lt;T> | undefined (+1 overload)&#10;import useAutoSub' >useAutoSub</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&apos;jazz-react&apos;</span><span style="color: #D4D4D4">;</span></div><div class='line'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) type Chat = CoList&lt;CoID&lt;Message>, JsonObject | null>&#10;import Chat' >Chat</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) type Message = CoMap&lt;{&#10;    text: string;&#10;}, JsonObject | null>&#10;import Message' >Message</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&apos;./dataModel.ts&apos;</span><span style="color: #D4D4D4">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">function</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp='function ChatWindow({ chatId }: {&#10;    chatId: Chat[&apos;id&apos;];&#10;}): React.JSX.Element' >ChatWindow</data-lsp></span><span style="color: #D4D4D4">({ </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) chatId: CoID&lt;Chat>' >chatId</data-lsp></span><span style="color: #D4D4D4"> }: { </span><span style="color: #9CDCFE"><data-lsp lsp='(property) chatId: CoID&lt;Chat>' >chatId</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0"><data-lsp lsp='(alias) type Chat = CoList&lt;CoID&lt;Message>, JsonObject | null>&#10;import Chat' >Chat</data-lsp></span><span style="color: #D4D4D4">[</span><span style="color: #CE9178">&apos;id&apos;</span><span style="color: #D4D4D4">] }) {</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp='const chat: ResolvedCoList&lt;Chat> | undefined' >chat</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #DCDCAA"><data-lsp lsp='(alias) useAutoSub&lt;Chat>(id?: CoID&lt;Chat> | undefined): ResolvedCoList&lt;Chat> | undefined (+1 overload)&#10;import useAutoSub' >useAutoSub</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) chatId: CoID&lt;Chat>' >chatId</data-lsp></span><span style="color: #D4D4D4">);</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='const chat: ResolvedCoList&lt;Chat> | undefined' >chat</data-lsp></span><span style="color: #D4D4D4"> ? </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">&apos;w-full max-w-xl h-full flex flex-col items-stretch&apos;</span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #569CD6">{</span></div><div class='line'><span style="color: #D4D4D4">      </span><span style="color: #9CDCFE"><data-lsp lsp='const chat: ResolvedCoList&lt;Chat>' >chat</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp='(method) Array&lt;ResolvedCoMap&lt;Message> | undefined>.map&lt;React.JSX.Element>(callbackfn: (value: ResolvedCoMap&lt;Message> | undefined, index: number, array: (ResolvedCoMap&lt;Message> | undefined)[]) => React.JSX.Element, thisArg?: any): React.JSX.Element[]' >map</data-lsp></span><span style="color: #D4D4D4">((</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) msg: ResolvedCoMap&lt;Message> | undefined' >msg</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) i: number' >i</data-lsp></span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> (</span></div><div class='line'><span style="color: #D4D4D4">        </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp='function ChatBubble({ text, by, time: t, byMe }: {&#10;    text?: string | undefined;&#10;    by?: string | undefined;&#10;    time?: Date | undefined;&#10;    byMe?: boolean | undefined;&#10;}): React.JSX.Element' >ChatBubble</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.Attributes.key?: React.Key | null | undefined' >key</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) msg: ResolvedCoMap&lt;Message> | undefined' >msg</data-lsp></span><span style="color: #D4D4D4">?.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) ResolvedCoMapBase&lt;Message>.id: CoID&lt;Message> | undefined' >id</data-lsp></span><span style="color: #569CD6">}</span></div><div class='line'><span style="color: #D4D4D4">          </span><span style="color: #9CDCFE"><data-lsp lsp='(property) text?: string | undefined' >text</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) msg: ResolvedCoMap&lt;Message> | undefined' >msg</data-lsp></span><span style="color: #D4D4D4">?.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) text: string | undefined' >text</data-lsp></span><span style="color: #569CD6">}</span></div><div class='line'><span style="color: #D4D4D4">          </span><span style="color: #9CDCFE"><data-lsp lsp='(property) by?: string | undefined' >by</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp='const chat: ResolvedCoList&lt;Chat>' >chat</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) ResolvedCoList&lt;Chat>.meta: ResolvedCoListMeta&lt;Chat>' >meta</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) edits: ResolvedCoListEdit&lt;Chat>[]' >edits</data-lsp></span><span style="color: #D4D4D4">[</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) i: number' >i</data-lsp></span><span style="color: #D4D4D4">].</span><span style="color: #9CDCFE"><data-lsp lsp='(property) by?: ResolvedAccount&lt;Account&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, AccountMeta>> | undefined' >by</data-lsp></span><span style="color: #D4D4D4">?.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) ResolvedGroup&lt;Account&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{ [key: string]: JsonValue | undefined; }, JsonObject | null>, AccountMeta>>.profile?: ResolvedCoMap&lt;Profile&lt;ProfileShape, ProfileMeta>> | null | undefined' >profile</data-lsp></span><span style="color: #D4D4D4">?.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) name: string | undefined' >name</data-lsp></span><span style="color: #569CD6">}</span></div><div class='line'><span style="color: #D4D4D4">          </span><span style="color: #9CDCFE"><data-lsp lsp='(property) byMe?: boolean | undefined' >byMe</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp='const chat: ResolvedCoList&lt;Chat>' >chat</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) ResolvedCoList&lt;Chat>.meta: ResolvedCoListMeta&lt;Chat>' >meta</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) edits: ResolvedCoListEdit&lt;Chat>[]' >edits</data-lsp></span><span style="color: #D4D4D4">[</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) i: number' >i</data-lsp></span><span style="color: #D4D4D4">].</span><span style="color: #9CDCFE"><data-lsp lsp='(property) by?: ResolvedAccount&lt;Account&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, AccountMeta>> | undefined' >by</data-lsp></span><span style="color: #D4D4D4">?.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) ResolvedAccount&lt;Account&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{ [key: string]: JsonValue | undefined; }, JsonObject | null>, AccountMeta>>.isMe: boolean | undefined' >isMe</data-lsp></span><span style="color: #569CD6">}</span></div><div class='line'><span style="color: #D4D4D4">          </span><span style="color: #9CDCFE"><data-lsp lsp='(property) time?: Date | undefined' >time</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #9CDCFE"><data-lsp lsp='const chat: ResolvedCoList&lt;Chat>' >chat</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) ResolvedCoList&lt;Chat>.meta: ResolvedCoListMeta&lt;Chat>' >meta</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) edits: ResolvedCoListEdit&lt;Chat>[]' >edits</data-lsp></span><span style="color: #D4D4D4">[</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) i: number' >i</data-lsp></span><span style="color: #D4D4D4">].</span><span style="color: #9CDCFE"><data-lsp lsp='(property) at: Date' >at</data-lsp></span><span style="color: #569CD6">}</span><span style="color: #D4D4D4"> </span><span style="color: #808080">/&gt;</span></div><div class='line'><span style="color: #D4D4D4">      ))</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #569CD6">}</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp='function ChatInput({ onSubmit }: {&#10;    onSubmit: (text: string) => void;&#10;}): React.JSX.Element' >ChatInput</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) onSubmit: (text: string) => void' >onSubmit</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) text: string' >text</data-lsp></span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> {</span></div><div class='line'><span style="color: #D4D4D4">      </span><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> </span><span style="color: #4FC1FF"><data-lsp lsp='const msg: Message' >msg</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #9CDCFE"><data-lsp lsp='const chat: ResolvedCoList&lt;Chat>' >chat</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) ResolvedCoList&lt;Chat>.meta: ResolvedCoListMeta&lt;Chat>' >meta</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) group: Group&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{&#10;    [key: string]: JsonValue | undefined;&#10;}, JsonObject | null>, JsonObject | null>' >group</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp='(method) Group&lt;Profile&lt;ProfileShape, ProfileMeta>, CoMap&lt;{ [key: string]: JsonValue | undefined; }, JsonObject | null>, JsonObject | null>.createMap&lt;Message>(init?: {&#10;    text: string;&#10;} | undefined, meta?: JsonObject | null | undefined, initPrivacy?: "private" | "trusting"): Message' >createMap</data-lsp></span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp='(alias) type Message = CoMap&lt;{&#10;    text: string;&#10;}, JsonObject | null>&#10;import Message' >Message</data-lsp></span><span style="color: #D4D4D4">&gt;({ </span><span style="color: #9CDCFE"><data-lsp lsp='(property) text: string' >text</data-lsp></span><span style="color: #D4D4D4"> });</span></div><div class='line'><span style="color: #D4D4D4">      </span><span style="color: #9CDCFE"><data-lsp lsp='const chat: ResolvedCoList&lt;Chat>' >chat</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #DCDCAA"><data-lsp lsp='(method) ResolvedCoList&lt;Chat>.append(item: CoID&lt;Message>, after?: number | undefined, privacy?: "private" | "trusting" | undefined): Chat' >append</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp='const msg: Message' >msg</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) CoMapView&lt;{ text: string; }, JsonObject | null>.id: CoID&lt;Message>' >id</data-lsp></span><span style="color: #D4D4D4">);</span></div><div class='line'><span style="color: #D4D4D4">    }</span><span style="color: #569CD6">}</span><span style="color: #808080">/&gt;</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4"> : </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">Loading...</span><span style="color: #808080">&lt;/</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class='line'><span style="color: #D4D4D4">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #569CD6">function</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp='function ChatBubble({ text, by, time: t, byMe }: {&#10;    text?: string | undefined;&#10;    by?: string | undefined;&#10;    time?: Date | undefined;&#10;    byMe?: boolean | undefined;&#10;}): React.JSX.Element' >ChatBubble</data-lsp></span><span style="color: #D4D4D4">({ </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) text: string | undefined' >text</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) by: string | undefined' >by</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(property) time?: Date | undefined' >time</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) t: Date | undefined' >t</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) byMe: boolean | undefined' >byMe</data-lsp></span><span style="color: #D4D4D4"> }:</span></div><div class='line'><span style="color: #D4D4D4">  { </span><span style="color: #9CDCFE"><data-lsp lsp='(property) text?: string | undefined' >text</data-lsp></span><span style="color: #D4D4D4">?: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(property) by?: string | undefined' >by</data-lsp></span><span style="color: #D4D4D4">?: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(property) time?: Date | undefined' >time</data-lsp></span><span style="color: #D4D4D4">?: </span><span style="color: #4EC9B0"><data-lsp lsp='interface Date' >Date</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(property) byMe?: boolean | undefined' >byMe</data-lsp></span><span style="color: #D4D4D4">?: </span><span style="color: #4EC9B0">boolean</span><span style="color: #D4D4D4"> }</span></div><div class='line'><span style="color: #D4D4D4">) {</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4"> </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #CE9178">\`items-</span><span style="color: #569CD6">\${</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) byMe: boolean | undefined' >byMe</data-lsp></span><span style="color: #D4D4D4"> ? </span><span style="color: #CE9178">&apos;end&apos;</span><span style="color: #D4D4D4"> : </span><span style="color: #CE9178">&apos;start&apos;</span><span style="color: #569CD6">}</span><span style="color: #CE9178"> flex flex-col\`</span><span style="color: #569CD6">}</span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">&apos;rounded-xl bg-stone-100 dark:bg-stone-700 dark:text-white py-2 px-4 mt-2 min-w-[5rem]&apos;</span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">      </span><span style="color: #569CD6">{</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) text: string | undefined' >text</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">}</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;/</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.HTMLAttributes&lt;HTMLDivElement>.className?: string | undefined' >className</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">&apos;text-xs text-neutral-500 ml-2&apos;</span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">      </span><span style="color: #569CD6">{</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) by: string | undefined' >by</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">}</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">{</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) t: Date | undefined' >t</data-lsp></span><span style="color: #D4D4D4">?.</span><span style="color: #DCDCAA"><data-lsp lsp='(method) Date.getHours(): number' >getHours</data-lsp></span><span style="color: #D4D4D4">() </span><span style="color: #569CD6">}</span><span style="color: #D4D4D4">:</span><span style="color: #569CD6">{</span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) t: Date | undefined' >t</data-lsp></span><span style="color: #D4D4D4">?.</span><span style="color: #DCDCAA"><data-lsp lsp='(method) Date.getMinutes(): number' >getMinutes</data-lsp></span><span style="color: #D4D4D4">() </span><span style="color: #569CD6">}</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #808080">&lt;/</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #808080">&gt;</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #808080">&lt;/</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.div: React.DetailedHTMLProps&lt;React.HTMLAttributes&lt;HTMLDivElement>, HTMLDivElement>' >div</data-lsp></span><span style="color: #808080">&gt;</span><span style="color: #D4D4D4">;</span></div><div class='line'><span style="color: #D4D4D4">}</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #569CD6">function</span><span style="color: #D4D4D4"> </span><span style="color: #DCDCAA"><data-lsp lsp='function ChatInput({ onSubmit }: {&#10;    onSubmit: (text: string) => void;&#10;}): React.JSX.Element' >ChatInput</data-lsp></span><span style="color: #D4D4D4">({ </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) onSubmit: (text: string) => void' >onSubmit</data-lsp></span><span style="color: #D4D4D4"> }: { </span><span style="color: #DCDCAA"><data-lsp lsp='(property) onSubmit: (text: string) => void' >onSubmit</data-lsp></span><span style="color: #D4D4D4">: (</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) text: string' >text</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4">) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0">void</span><span style="color: #D4D4D4"> }) {</span></div><div class='line'><span style="color: #D4D4D4">  </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4"> </span><span style="color: #808080">&lt;</span><span style="color: #569CD6"><data-lsp lsp='(property) JSX.IntrinsicElements.input: React.DetailedHTMLProps&lt;React.InputHTMLAttributes&lt;HTMLInputElement>, HTMLInputElement>' >input</data-lsp></span><span style="color: #D4D4D4"> </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.HTMLAttributes&lt;T>.className?: string | undefined' >className</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">&apos;rounded p-2 border mt-auto dark:bg-black dark:text-white dark:border-stone-700&apos;</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.InputHTMLAttributes&lt;HTMLInputElement>.placeholder?: string | undefined' >placeholder</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #CE9178">&apos;Type a message and press Enter&apos;</span></div><div class='line'><span style="color: #D4D4D4">    </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.DOMAttributes&lt;HTMLInputElement>.onKeyDown?: React.KeyboardEventHandler&lt;HTMLInputElement> | undefined' >onKeyDown</data-lsp></span><span style="color: #D4D4D4">=</span><span style="color: #569CD6">{</span><span style="color: #D4D4D4">({ </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(property) React.BaseSyntheticEvent&lt;KeyboardEvent, EventTarget &amp; HTMLInputElement, EventTarget>.currentTarget: EventTarget &amp; HTMLInputElement' >currentTarget</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp></span><span style="color: #D4D4D4"> }) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> {</span></div><div class='line'><span style="color: #D4D4D4">      </span><span style="color: #C586C0">if</span><span style="color: #D4D4D4"> (</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) key: string' >key</data-lsp></span><span style="color: #D4D4D4"> !== </span><span style="color: #CE9178">&apos;Enter&apos;</span><span style="color: #D4D4D4"> || !</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) HTMLInputElement.value: string' >value</data-lsp></span><span style="color: #D4D4D4">) </span><span style="color: #C586C0">return</span><span style="color: #D4D4D4">;</span></div><div class='line'><span style="color: #D4D4D4">      </span><span style="color: #DCDCAA"><data-lsp lsp='(parameter) onSubmit: (text: string) => void' >onSubmit</data-lsp></span><span style="color: #D4D4D4">(</span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) HTMLInputElement.value: string' >value</data-lsp></span><span style="color: #D4D4D4">);</span></div><div class='line'><span style="color: #D4D4D4">      </span><span style="color: #9CDCFE"><data-lsp lsp='(parameter) input: EventTarget &amp; HTMLInputElement' >input</data-lsp></span><span style="color: #D4D4D4">.</span><span style="color: #9CDCFE"><data-lsp lsp='(property) HTMLInputElement.value: string' >value</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #CE9178">&apos;&apos;</span><span style="color: #D4D4D4">;</span></div><div class='line'><span style="color: #D4D4D4">    }</span><span style="color: #569CD6">}</span><span style="color: #808080">/&gt;</span></div><div class='line'><span style="color: #D4D4D4">}</span></div><div class='line'>&nbsp;</div></code></div></pre>`
	}}/>;
}

export function DataModel_ts() {
	return <div dangerouslySetInnerHTML={{__html: `<pre class="shiki dark-plus twoslash lsp" style="background-color: #1E1E1E; color: #D4D4D4"><div class="language-id">tsx</div><div class='code-container'><code><div class='line'><span style="color: #C586C0">import</span><span style="color: #D4D4D4"> { </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) class CoMap&lt;Shape extends { [key: string]: JsonValue | undefined; } = { [key: string]: JsonValue | undefined; }, Meta extends JsonObject | null = JsonObject | null>&#10;import CoMap' >CoMap</data-lsp></span><span style="color: #D4D4D4">, </span><span style="color: #9CDCFE"><data-lsp lsp='(alias) class CoList&lt;Item extends JsonValue = JsonValue, Meta extends JsonObject | null = JsonObject | null>&#10;import CoList' >CoList</data-lsp></span><span style="color: #D4D4D4"> } </span><span style="color: #C586C0">from</span><span style="color: #D4D4D4"> </span><span style="color: #CE9178">&apos;cojson&apos;</span><span style="color: #D4D4D4">;</span></div><div class='line'>&nbsp;</div><div class='line'><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">type</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0"><data-lsp lsp='type Chat = CoList&lt;CoID&lt;Message>, JsonObject | null>' >Chat</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #4EC9B0"><data-lsp lsp='(alias) class CoList&lt;Item extends JsonValue = JsonValue, Meta extends JsonObject | null = JsonObject | null>&#10;import CoList' >CoList</data-lsp></span><span style="color: #D4D4D4">&lt;</span><span style="color: #4EC9B0"><data-lsp lsp='type Message = CoMap&lt;{&#10;    text: string;&#10;}, JsonObject | null>' >Message</data-lsp></span><span style="color: #D4D4D4">[</span><span style="color: #CE9178">&apos;id&apos;</span><span style="color: #D4D4D4">]&gt;;</span></div><div class='line'><span style="color: #C586C0">export</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">type</span><span style="color: #D4D4D4"> </span><span style="color: #4EC9B0"><data-lsp lsp='type Message = CoMap&lt;{&#10;    text: string;&#10;}, JsonObject | null>' >Message</data-lsp></span><span style="color: #D4D4D4"> = </span><span style="color: #4EC9B0"><data-lsp lsp='(alias) class CoMap&lt;Shape extends { [key: string]: JsonValue | undefined; } = { [key: string]: JsonValue | undefined; }, Meta extends JsonObject | null = JsonObject | null>&#10;import CoMap' >CoMap</data-lsp></span><span style="color: #D4D4D4">&lt;{ </span><span style="color: #9CDCFE"><data-lsp lsp='(property) text: string' >text</data-lsp></span><span style="color: #D4D4D4">: </span><span style="color: #4EC9B0">string</span><span style="color: #D4D4D4"> }&gt;;</span></div><div class='line'>&nbsp;</div></code></div></pre>`
	}}/>;
}